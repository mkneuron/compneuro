function [  ] = actor_critic_assignment(  )
% Main function

%% init vars

n0_actCells = 8;   % This is equivalent to the number of possible actions
n0_plaCells = 493; % number of place cells
map_radius = 50;   % radius in cm (aka pixels)
p_std = 16;        % place cell std, aka sigma
strict_place = 1;  % forbid place cell centers outside maze

%% get environment map and coordinates of place cells
[map,cell_coord] = RL_env(n0_plaCells,map_radius,p_std,strict_place);
map_dims = size(map, 2);

%% initialize start and end points

% Find a valid starting position.
have_start_pos = 0; % false

while ~have_start_pos
    % get random position
    rat_start_position = [randi(map_dims), randi(map_dims)];
    % check if it is inside the maze
    if map(rat_start_position(1,1), rat_start_position(1,2)) == 1
        have_start_pos = 1; % set as true
    end
end

% find a valid end position
have_platform = 0; % false

while ~have_platform
    goal_position = [randi(map_dims), randi(map_dims)];
    if map(goal_position(1,1), goal_position(1,2)) == 1
        have_platform = 1;
    end
end

% Initialize weights.
w_place2actor = rand(n0_plaCells, n0_actCells);

%% Actor-Critic loop
% get spike rates for place cells
position = rat_start_position;
spikeCounts = placeCells_spikeRate(position,cell_coord,p_std);

%% Actor choose an allowed action.
is_legal = 0;
while ~is_legal %Â illegal memes, ermmm moves I mean
    [direction, w_place2actor_dx] = actor(n0_actCells, critic_PrErr, ... 
                                          spikeCounts, w_place2actor);
    % Move the bloody rat.
    [updated_position] = move_rat (current_position, direction);
    if map(updated_position(1,1), updated_position(1,2)) == 1
        is_legal = 1;
    else
        warning('Dumb rat wants to exit the swimming pool'); % dumb rat doesn't know any better
    end
end

% Update Weights for the Actor.
w_place2actor = w_place2actor + w_place2actor_dx;

end
